<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oxm="http://www.springframework.org/schema/oxm"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd 
						http://www.springframework.org/schema/oxm 
						http://www.springframework.org/schema/oxm/spring-oxm.xsd">




	<!-- -->
	<!-- Configuration for encryptor, based on environment variables. -->
	<!-- -->
	<!-- In this example, the encryption password will be read from an -->
	<!-- environment variable called "APP_ENCRYPTION_PASSWORD" which, once -->
	<!-- the application has been started, could be safely unset. -->
	<!-- -->
	<bean id="environmentVariablesConfiguration"
		class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		<property name="algorithm" value="PBEWithMD5AndDES" />
  		<property name="passwordEnvName" value="APP_ENCRYPTION_PASSWORD" />  
	</bean>


	<!-- 
	The will be the encryptor used for decrypting configuration values.
 -->	
	<bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="config" ref="environmentVariablesConfiguration" />
	</bean>

 
	<!-- -->
	<!-- The EncryptablePropertyPlaceholderConfigurer will read the -->
	<!-- .properties files and make their values accessible as ${var}. -->
	<!-- -->
	<!-- Our "configurationEncryptor" bean (which implements -->
	<!-- org.jasypt.encryption.StringEncryptor) is set as a constructor arg. -->
	<!-- -->
	<bean id="propertyConfigurer"
     class="org.jasypt.spring3.properties.EncryptablePropertyPlaceholderConfigurer"> 
		<constructor-arg ref="configurationEncryptor" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:cliente-ws.properties</value>
			</list>
		</property>

	</bean>

	<bean name="webServiceTemplate" class="org.springframework.ws.client.core.WebServiceTemplate">
<!--     <property name="defaultUri"	value="https://${servidor.ws}:${puerto.ws}/IOVCConsulta/ObtenerConsulta" />	 -->	
  	 	<property name="defaultUri"	value="https://serwebr.sedecatastro.gob.es/ServiciosWCF/OVCWcfConsulta/wsdl/OVCConsulta.wsdl" />		 
  <!--   https://serwebi.sedecatastro.gob.es/ServiciosWCF/OVCWcfConsulta/OVCConsulta.svc -->
        <property name="marshaller" ref="marshaller" />
		<property name="unmarshaller" ref="marshaller" />
		<property name="messageSender" ref="messageSender" />
		<property name="interceptors">
			<list>
				<ref bean="wsSecurityInterceptorPeticion" />
				<ref bean="wsSecurityInterceptorRespuesta" />
			</list>
		</property>
	</bean>

	<bean name="messageSender"
		class="org.springframework.ws.transport.http.CommonsHttpMessageSender" />

	<bean id="marshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="contextPaths">
			<list>

				<value>es.meh.catastro</value>
 			    <value>es.meh.catastro.impl</value>

			</list>
		</property>
	</bean>

	<bean id="servicio"
		class="es.meh.catastro.impl.OVCConsultaImpl">
		<property name="webServiceTemplate" ref="webServiceTemplate" />
	</bean>

	<bean id="wsSecurityInterceptorPeticion"
		class="org.springframework.ws.soap.security.wss4j2.Wss4jSecurityInterceptor">
		<property name="validationActions" value="Encrypt Signature" />
		<property name="enableSignatureConfirmation" value="true" />
		<property name="validationDecryptionCrypto">
			<ref bean="keystore-ts" />
		</property>

		<property name="validationCallbackHandler">
			<bean
				class="org.springframework.ws.soap.security.wss4j2.callback.KeyStoreCallbackHandler">
				<property name="privateKeyPassword" value="${cliente.ws.passwdsecerta}" />
			</bean>
		</property>

		<property name="validationSignatureCrypto">
			<ref bean="keystore-ks" />
		</property>
	</bean>


	<bean id="wsSecurityInterceptorRespuesta"
		class="org.springframework.ws.soap.security.wss4j2.Wss4jSecurityInterceptor">
		<property name="securementActions" value="Signature Encrypt" />
		<property name="securementUsername" value="${cliente.ws.aliascertificado}" /> <!-- alias del certificado del cliente que hace la petición -->
		<property name="securementPassword" value="${cliente.ws.passwdsecerta}" />
		<property name="securementSignatureKeyIdentifier" value="DirectReference" />
		<property name="securementSignatureCrypto">
			<ref bean="keystore-ks" />
		</property>

		<property name="securementEncryptionUser" value="${cliente.ws.aliascertificado.servidor}" /> <!-- alias del certificado publico del servidor -->
		<property name="securementEncryptionCrypto">
			<ref bean="keystore-ts" />
		</property>

<!-- Se realiza en el main en ejecución 	
	<property name="securementEncryptionParts" value="{}{http://www.catastro.meh.es/IOVCConsulta}ObtenerConsulta" /> -->
            
	</bean>

	<!-- keystore -->
	<bean id="keystore-ks"
			class="org.springframework.ws.soap.security.wss4j2.support.CryptoFactoryBean">
			<property name="keyStorePassword" value="${cliente.ws.passwdalmacen-ks}" />
			<property name="keyStoreLocation" value="classpath:${cliente.ws.almacenlocation-ks}" />
	</bean>
	
		<!-- keystore -->
	<bean id="keystore-ts"
			class="org.springframework.ws.soap.security.wss4j2.support.CryptoFactoryBean">
			<property name="keyStorePassword" value="${cliente.ws.passwdalmacen-ts}" />
			<property name="keyStoreLocation" value="classpath:${cliente.ws.almacenlocation-ts}" />
	</bean>


</beans>
